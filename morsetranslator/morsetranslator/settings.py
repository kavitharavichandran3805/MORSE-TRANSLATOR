# """
# Django settings for morsetranslator project.

# Generated by 'django-admin startproject' using Django 5.1.6.
# """

# from pathlib import Path
# import os

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent

# # Quick-start development settings - unsuitable for production
# SECRET_KEY = 'django-insecure-*)wzxpriqf1$d0j%o=%-k=^7u1h7=x0k9g0!u73ksb0(q0xh*0'

# DEBUG = True

# CSRF_USE_SESSIONS = True  # Store CSRF token in the session instead of cookie
# CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript to access the CSRF cookie
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework.authentication.SessionAuthentication',
#         'rest_framework.authentication.BasicAuthentication',
#         'rest_framework.authentication.TokenAuthentication',  # If you're using tokens
#     ),
# }

# SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Store session in DB

# ALLOWED_HOSTS = ['192.168.150.78', 'localhost', '127.0.0.1']

# # Application definition
# INSTALLED_APPS = [
#     "daphne",  # Required for WebSockets
#     "channels",
#     "backend",  # Your actual Django app
#     "api",
#     "rest_framework",
#     "corsheaders",
#     "django.contrib.admin",
#     "django.contrib.auth",
#     "django.contrib.contenttypes",
#     "django.contrib.sessions",
#     "django.contrib.messages",
#     "django.contrib.staticfiles",
# ]

# MIDDLEWARE = [
#     'corsheaders.middleware.CorsMiddleware',
#     'django.middleware.security.SecurityMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]

# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # React frontend
#     "http://127.0.0.1:3000",
# ]
# CORS_ALLOW_CREDENTIALS = True

# ASGI_APPLICATION='morsetranslator.asgi.application'

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels.layers.InMemoryChannelLayer",  # For development
#         # Use Redis in production:
#         # "BACKEND": "channels_redis.core.RedisChannelLayer",
#         # "CONFIG": {
#         #     "hosts": [("127.0.0.1", 6379)],
#         # },
#     },
# }
# ROOT_URLCONF = 'morsetranslator.urls'

# SESSION_COOKIE_AGE = 86400  # (1 day) Adjust if needed
# SESSION_SAVE_EVERY_REQUEST = True  # ✅ Ensure session is saved on every request
# SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # ✅ Keeps session even after closing the browser
# SESSION_COOKIE_SECURE = False  # ✅ Set to True if using HTTPS
# SESSION_COOKIE_HTTPONLY = True  # ✅ Helps with security


# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Optional, for custom templates
#         'APP_DIRS': True,  # Enables Django to find built-in templates
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]


# # Database
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# # Password validation
# AUTH_PASSWORD_VALIDATORS = [
#     {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
# ]

# # Internationalization
# LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'UTC'
# USE_I18N = True
# USE_TZ = True

# # Static files (CSS, JavaScript, Images)
# STATIC_URL = 'static/'

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# # Email configuration
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'raniravi3821@gmail.com'
# EMAIL_HOST_PASSWORD = 'amblntiryzxjzpna'
# DEFAULT_TO_EMAIL = 'kavitharavichandran3805@gmail.com'

"""
Django settings for morsetranslator project.

Generated by 'django-admin startproject' using Django 5.1.6.
"""

from pathlib import Path
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
SECRET_KEY = 'django-insecure-*)wzxpriqf1$d0j%o=%-k=^7u1h7=x0k9g0!u73ksb0(q0xh*0'

DEBUG = True

CSRF_USE_SESSIONS = True  # Store CSRF token in the session instead of cookie
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript to access the CSRF cookie
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',  # If you're using tokens
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

# Session configuration - improved for cross-domain access
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Store session in DB
SESSION_COOKIE_NAME = 'sessionid'  # Django's default, but being explicit
SESSION_COOKIE_PATH = '/'  # Make sure cookie is available for all paths
SESSION_COOKIE_DOMAIN = None  # None means use the current domain
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds (increased from 1 day)
SESSION_SAVE_EVERY_REQUEST = True  # ✅ Ensure session is saved on every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # ✅ Keeps session even after closing the browser
SESSION_COOKIE_SECURE = False  # ✅ Set to True if using HTTPS
SESSION_COOKIE_HTTPONLY = True  # ✅ Helps with security
SESSION_COOKIE_SAMESITE = 'Lax'  # Less strict than 'Strict', works better for development

ALLOWED_HOSTS = ['192.168.150.78', 'localhost', '127.0.0.1']

# Application definition
INSTALLED_APPS = [
    "daphne",  # Required for WebSockets
    "channels",
    "backend",  # Your actual Django app
    "api",
    "rest_framework",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
INSTALLED_APPS += ["rest_framework_simplejwt"]

# Make sure middleware order is correct for session handling
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Must be first for CORS to work
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',  # Must be before CSRF
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Must be after Session
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Enhanced CORS settings for better session handling
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React frontend
    "http://127.0.0.1:3000",
]
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']  # Make CSRF token accessible
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

ASGI_APPLICATION='morsetranslator.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",  # For development
        # Use Redis in production:
        # "BACKEND": "channels_redis.core.RedisChannelLayer",
        # "CONFIG": {
        #     "hosts": [("127.0.0.1", 6379)],
        # },
    },
}
ROOT_URLCONF = 'morsetranslator.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Optional, for custom templates
        'APP_DIRS': True,  # Enables Django to find built-in templates
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'raniravi3821@gmail.com'
EMAIL_HOST_PASSWORD = 'amblntiryzxjzpna'
DEFAULT_TO_EMAIL = 'kavitharavichandran3805@gmail.com'
